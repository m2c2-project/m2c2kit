// eslint-disable-next-line no-undef, @typescript-eslint/no-var-requires
const { Compilation, sources } = require("webpack");
// eslint-disable-next-line no-undef, @typescript-eslint/no-var-requires
const { Buffer } = require("buffer");

/**
 * Some assets need to be modified before they will work in the browser.
 */
class ModifyAssets {
  apply(compiler) {
    compiler.hooks.thisCompilation.tap("ModifyAssets", (compilation) => {
      compilation.hooks.processAssets.tap(
        {
          name: "ModifyAssets",
          stage: Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE,
        },
        (assets) => {
          console.log();
          for (let assetName in assets) {
            /**
             * The index.js has been built with an import to m2c2 core as
             * @m2c2kit/core, but this needs to be changed to a URL path
             * to work in the browser.
             */
            if (assetName === "assets/m2c2kit/addons/index.js") {
              console.log(`Modified asset: ${assetName}`);
              const asset = compilation.getAsset(assetName);
              let assetString = asset.source
                .source()
                .toString("utf8")
                .replace("@m2c2kit/core", "./../core/index.js");

              const buffer = Buffer.from(assetString, "utf8");
              compilation.updateAsset(assetName, new sources.RawSource(buffer));
            }

            /**
             * The assessment TypeScript source code is just the class for the
             * assessment, and not the supporting code to bootstrap the session
             * start and events. We add this supporting code so a runnable
             * test can be executed in the browser.
             */
            const assetsToProcess = [
              {
                name: "assets/src/cli-starter/index.ts",
                class: "CliStarter",
              },
              {
                name: "assets/src/color-dots/index.ts",
                class: "ColorDots",
              },
              {
                name: "assets/src/grid-memory/index.ts",
                class: "GridMemory",
              },
              {
                name: "assets/src/symbol-search/index.ts",
                class: "SymbolSearch",
              },
            ];

            assetsToProcess.forEach((assetToProcess) => {
              if (assetName === assetToProcess.name) {
                console.log(`Modified asset: ${assetName}`);
                const asset = compilation.getAsset(assetName);
                let assetString =
                  asset.source.source().toString("utf8") +
                  `const activity = new ${assetToProcess.class}();\n` +
                  sessionCode;

                assetString = assetString.replace(
                  '} from "@m2c2kit/core";',
                  `  Session,
  SessionLifecycleEvent,
  ActivityDataEvent,
  ActivityLifecycleEvent,
} from "@m2c2kit/core";`
                );

                assetString = assetString.replace(
                  `export { ${assetToProcess.className} };`,
                  ""
                );

                const buffer = Buffer.from(assetString, "utf8");
                compilation.updateAsset(
                  assetName,
                  new sources.RawSource(buffer)
                );
              }
            });
          }
        }
      );
    });
  }
}

// eslint-disable-next-line no-undef
module.exports = {
  module: {
    rules: [
      {
        test: /node_modules[\\|/]code-block-writer[\\|/]umd[\\|/]/,
        use: { loader: "umd-compat-loader" },
      },
    ],
    // eslint-disable-next-line no-undef
    noParse: [require.resolve("@ts-morph/common/dist/typescript.js")],
  },
  plugins: [new ModifyAssets()],
};

const sessionCode = `const session = new Session({
  activities: [activity],
  sessionCallbacks: {
    /**
     * onSessionLifecycleChange() will be called on events such
     * as when the session initialization is complete or when the
     * session ends.
     *
     * Once initialized, the below code will start the session.
     */
    onSessionLifecycleChange: (ev: SessionLifecycleEvent) => {
      if (ev.initialized) {
        session.start();
      }
      if (ev.ended) {
        console.log("ended session");
      }
    },
  },
  activityCallbacks: {
    /**
     * onActivityDataCreate() callback is where you insert code to post data
     * to an API or interop with a native function in the host app,
     * if applicable, as we do with sendEventToWebView().
     *
     * newData is the data that was just generated by the completed trial.
     * data is all the data, cumulative of all trials, that have been generated.
     *
     * We separate out newData from data in case you want to alter the execution
     * based on the most recent trial, e.g., maybe you want to stop after
     * a certain user behavior or performance threshold in the just completed
     * trial.
     *
     * activityConfiguration is the game parameters that were used.
     *
     * The schema for all of the above are in JSON Schema format.
     */
    onActivityDataCreate: (ev: ActivityDataEvent) => {
      console.log(\`********** trial complete\`);
      console.log("newData: " + JSON.stringify(ev.newData));
      console.log("newData schema: " + JSON.stringify(ev.newDataSchema));
      console.log("data: " + JSON.stringify(ev.data));
      console.log("data schema: " + JSON.stringify(ev.dataSchema));
      console.log(
        "activity parameters: " + JSON.stringify(ev.activityConfiguration)
      );
      console.log(
        "activity parameters schema: " +
          JSON.stringify(ev.activityConfigurationSchema)
      );
    },
    /**
     * onActivityLifecycleChange() notifies us when an activity, such
     * as a game (assessment) or a survey, has completed. Usually, however,
     * we want to know when all the activities are done, so we'll
     * look for the session ending via onSessionLifecycleChange
     */
    onActivityLifecycleChange: (ev: ActivityLifecycleEvent) => {
      if (ev.ended || ev.canceled) {
        const status = ev.ended ? "ended" : "canceled";
        console.log(\`\${status} activity \${ev.name}\`);
        if (session.nextActivity) {
          session.advanceToNextActivity();
        } else {
          session.end();
        }
      }
    },
  },
});

/**
 * Make session also available on window in case we want to control
 * the session through another means, such as other javascript or
 * browser code, or a mobile WebView's invocation of session.start().
 * */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
(window as unknown as any).session = session;
session.init().then(() => {
  /**
   * session.init() may take a few moments when downloading non-local or
   * non-cached resources. After session.init() completes, the below code
   * removes the loading spinner that is defined in the HTML template.
   */
  const loaderDiv = document.getElementById("m2c2kit-loader-div");
  if (loaderDiv) {
    loaderDiv.classList.remove("m2c2kit-loader");
  }
});
`;
