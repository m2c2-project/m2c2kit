import {
  Session,
  SessionLifecycleEvent,
  ActivityResultsEvent,
  ActivityLifecycleEvent,
  ActivityType,
  EventType,
  Game,
  Scene,
  Label,
  LabelHorizontalAlignmentMode,
  IDataStore,
} from "@m2c2kit/core";
import { LocalDatabase } from "@m2c2kit/db";
import { ColorShapes } from "@m2c2kit/assessment-color-shapes";
import { ColorDots } from "@m2c2kit/assessment-color-dots";
import { GridMemory } from "@m2c2kit/assessment-grid-memory";
import { SymbolSearch } from "@m2c2kit/assessment-symbol-search";
import { CliStarter } from "@m2c2kit/assessment-cli-starter";
import { Survey } from "@m2c2kit/survey";
import { surveyJson } from "./surveyJson";
import { Button, VirtualKeyboard } from "@m2c2kit/addons";

const a1 = new ColorShapes();
const a2 = new ColorDots();
const a3 = new GridMemory();
const a4 = new SymbolSearch();
const a5 = new CliStarter();
const survey = new Survey(surveyJson);

class Demo extends Game {
  constructor() {
    const options = {
      name: "demo",
      id: "demo",
      version: "0",
      width: 400,
      height: 800,
      //fontUrls: ["assets/docs/fonts/roboto/Roboto-Regular.ttf"],
      // images: [
      //     {
      //         imageName: "stroop-screenshot",
      //         height: 336,
      //         width: 384,
      //         url: "./assets/docs/img/stroop.png",
      //     },
      // ],
    };
    super(options);
  }

  override async init() {
    await super.init();
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const game = this;

    await this.storeSetItem("name", "pc111");
    await this.storeSetItem("seen", [1232321, 43432, 4324324]);
    console.log(await this.storeGetItem("name"));
    console.log(await this.storeGetItem("seen"));
    //await this.storeClearItems();

    const t = (await this.storeGetItem<number>("times", true)) ?? 0;
    await this.storeSetItem("times", t + 1, true);

    console.log(await this.storeGetItem("times", true));

    console.log(await this.storeItemExists("name"));
    console.log(await this.storeItemExists("name1"));
    console.log(await this.storeItemExists("name", false));

    //await this.storeDeleteItem("times", true);

    const s0 = new Scene();
    game.addScene(s0);

    const keyboard = new VirtualKeyboard({
      position: { x: 200, y: 400 },
      size: { width: 400, height: 300 },
    });
    s0.addChild(keyboard);

    const textbox = new Label({
      position: { x: 10, y: 100 },
      horizontalAlignmentMode: LabelHorizontalAlignmentMode.Left,
      preferredMaxLayoutWidth: 390,
      anchorPoint: { x: 0, y: 0 },
    });
    s0.addChild(textbox);

    const exit = new Button({
      text: "Next",
      position: { x: 200, y: 50 },
      isUserInteractionEnabled: true,
    });
    exit.onTapDown(() => {
      game.end();
    });
    s0.addChild(exit);

    keyboard.onKeyUp((e) => {
      console.log(e.key);
      if (e.key !== "Shift" && e.key !== "Backspace") {
        textbox.text += e.key;
      }
      if (e.key === "Backspace") {
        textbox.text = textbox.text.slice(0, textbox.text.length - 1);
      }
    });
  }
}

const session = new Session({
  activities: [new Demo(), a1, a2, a3, a4, a5, survey],
  canvasKitWasmUrl: "assets/canvaskit.wasm",
  sessionCallbacks: {
    /**
     * onSessionLifecycle() will be called on events such
     * as when the session initialization is complete or when the
     * session ends.
     *
     * Once initialized, the below code will start the session.
     */
    onSessionLifecycle: (ev: SessionLifecycleEvent) => {
      if (ev.type === EventType.SessionInitialize) {
        session.start();
      }
      if (ev.type === EventType.SessionEnd) {
        console.log("ðŸ”´ ended session");
      }
    },
  },
  activityCallbacks: {
    /**
     * onActivityResults() callback is where you insert code to post data
     * to an API or interop with a native function in the host app,
     * if applicable.
     *
     * newData is the data that was just generated by the completed trial or
     * survey question.
     * data is all the data, cumulative of all trials or questions in the
     * activity, that have been generated.
     *
     * We separate out newData from data in case you want to alter the execution
     * based on the most recent trial, e.g., maybe you want to stop after
     * a certain user behavior or performance threshold in the just completed
     * trial.
     *
     * activityConfiguration is the game parameters that were used.
     *
     * The schema for all of the above are in JSON Schema format.
     * Currently, only games generate schema.
     */
    onActivityResults: (ev: ActivityResultsEvent) => {
      if (ev.target.type === ActivityType.Game) {
        console.log(`âœ… trial complete:`);
      } else if (ev.target.type === ActivityType.Survey) {
        console.log(`âœ… survey response:`);
      }
      console.log("  newData: " + JSON.stringify(ev.newData));
      console.log("  newData schema: " + JSON.stringify(ev.newDataSchema));
      console.log("  data: " + JSON.stringify(ev.data));
      console.log("  data schema: " + JSON.stringify(ev.dataSchema));
      console.log(
        "  activity parameters: " + JSON.stringify(ev.activityConfiguration)
      );
      console.log(
        "  activity parameters schema: " +
          JSON.stringify(ev.activityConfigurationSchema)
      );
      console.log("  activity metrics: " + JSON.stringify(ev.activityMetrics));

      db.saveActivityResults(ev).catch((err) => {
        console.error("Could not save results to local database. err: " + err);
      });
    },
    /**
     * onActivityLifecycle() notifies us when an activity, such
     * as a game (assessment) or a survey, has ended or canceled.
     * Usually, however, we want to know when all the activities are done,
     * so we'll look for the session ending via onSessionLifecycleChange
     */
    onActivityLifecycle: (ev: ActivityLifecycleEvent) => {
      const activityType =
        ev.target.type === ActivityType.Game ? "game" : "survey";
      if (
        ev.type === EventType.ActivityEnd ||
        ev.type === EventType.ActivityCancel
      ) {
        const status =
          ev.type === EventType.ActivityEnd ? "ðŸ”´ ended" : "ðŸš« canceled";
        console.log(`${status} activity (${activityType}) ${ev.target.name}`);
        if (session.nextActivity) {
          session.advanceToNextActivity();
        } else {
          session.end();
        }
      }
      if (ev.type === EventType.ActivityStart) {
        console.log(`ðŸŸ¢ started activity (${activityType}) ${ev.target.name}`);
      }
    },
  },
});

/**
 * Make session also available on window in case we want to control
 * the session through another means, such as other javascript or
 * browser code, or a mobile WebView's invocation of session.start().
 * */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
(window as unknown as any).session = session;
const db: IDataStore = new LocalDatabase();
session.dataStore = db;
session.init();
