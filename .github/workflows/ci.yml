# Build/test/deploy packages to npm and docs to GitHub Pages
name: CI/CD

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "ci"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      # Fixes JS out of memory error; see https://github.com/actions/runner-images/issues/70
      NODE_OPTIONS: "--max_old_space_size=4096"
      # The base url in GitHub Pages where the docs will be deployed is typically the repo name
      DOCS_BASE_URL: m2c2kit
      # Use GitHub secrets to get token used to authenticate with the registry
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      # URL of the registry where the packages will be published
      REGISTRY_URL: https://registry.npmjs.org
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up docker compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.23.0"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
      - run: npm config set registry $REGISTRY_URL
      # remove the scheme from the URL; needs to be in the format of //registry.npmjs.org/:_authToken=...
      - run: 'npm config set $(echo $REGISTRY_URL | awk -v TOKEN=$NODE_AUTH_TOKEN -F[/:] ''{ print "//" $4 "/:_authToken=" TOKEN}'')'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      # No need to run tests here because they will be run as part of the "Integration test" next step (see repo root Dockerfile, "RUN npm test")
      #- name: Test
      #  run: npm run test
      - name: Integration test
        run: npm run integration-test
        timeout-minutes: 15
      - name: Publish updated packages
        # only packages explicitly named in scripts/publish-updated-packages.mjs will be published
        run: npm run publish-updated
        # publish-updated will set an environment variable to indicate if 1) there were updated packages, and 2) all updated packages were successfully published to the registry
      - name: Build docs
        if: env.PUBLISHED_UPDATED_PACKAGES=='true'
        run: npm run build -w website
      - name: Setup Pages
        if: env.PUBLISHED_UPDATED_PACKAGES=='true'
        uses: actions/configure-pages@v5
      - name: Upload artifact
        if: env.PUBLISHED_UPDATED_PACKAGES=='true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: website/build
      - name: Deploy to GitHub Pages
        if: env.PUBLISHED_UPDATED_PACKAGES=='true'
        id: deployment
        uses: actions/deploy-pages@v4
